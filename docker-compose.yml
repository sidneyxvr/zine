version: '3.4'

services:
  mongodb:
    image: mongo

  sqlserverdb:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver

  argon.zine.app.api:
    image: ${DOCKER_REGISTRY-}argonzineappapi
    build:
      context: .
      dockerfile: src/Apps/Argon.Zine.App.Api/Dockerfile
    environment:
      - ConnectionStrings__IdentityConnection=Server=host.docker.internal;Database=Identity;User Id=sa;Password=Teste@S3nha;
      - ConnectionStrings__CustomerConnection=Server=host.docker.internal;Database=Customer;User Id=admin;Password=Teste@S3nha;
      - ConnectionStrings__RestaurantConnection=Server=host.docker.internal;Database=Restaurant;User Id=admin;Password=Teste@S3nha;
      - ConnectionStrings__CatalogConnection=Server=host.docker.internal;Database=Catalog;User Id=sa;Password=Teste@S3nha;
      - ConnectionStrings__OrderingConnection=Server=host.docker.internal;Database=Ordering;User Id=admin;Password=Teste@S3nha;
      - ConnectionStrings__EventSourcingConnection=ConnectTo=tcp://admin:changeit@eventstore:1113
      - ConnectionStrings__CatalogRedis=host.docker.internal:6379
    depends_on:
      - sqlserverdb
    networks:
      - rabbitnetwork
      - eventnetwork

  eventstore:
    image: eventstore/eventstore:21.2.0-buster-slim
    container_name: eventstore
    hostname: eventstore
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - "1113:1113"
      - "2113:2113"
    volumes:
      - type: volume
        source: eventstore-volume-data
        target: /var/lib/eventstore
      - type: volume
        source: eventstore-volume-logs
        target: /var/log/eventstore
    networks:
      - eventnetwork

  rabbitmq:
    image: rabbitmq:3.9-management
    container_name: rabbitmq
    hostname: rabbitmq
    volumes:
      - ${APPDATA}/rabbitmq/etc/definitions.json:/etc/rabbitmq/definitions.json
      - ${APPDATA}/rabbitmq/etc/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ${APPDATA}/rabbitmq/data:/var/lib/rabbitmq/mnesia/rabbit@my-rabbit
      - ${APPDATA}/rabbitmq/logs:/var/log/rabbitmq/log
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - rabbitnetwork

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
  
  #prometheus:
  #  image: prom/prometheus
  #  container_name: prometheus
  #  depends_on:
  #    - argon.zine.app.api
  #  volumes:
  #    - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #  ports:
  #    - 9090:9090
  #  networks:
  #    - "monitoring-network"

  loki:
    image: grafana/loki:2.3.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - loki

  promtail:
    image: grafana/promtail:2.3.0
    container_name: promtail
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml
    networks:
      - loki

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - loki

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    ports:
      - 9093:9093
    networks:
      - "monitoring-network"
  
  postgresdb:
    image: postgis/postgis
    container_name: postgresdb
    restart: always
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=Teste@S3nha
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
    ports:
      - "5432:5432" 
    volumes:
      - ${APPDATA}/postgres:/var/lib/postgresql
    networks:
      - postgres-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=sidneyxvr@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=Teste@S3nha
    ports:
      - "5050:80"
    depends_on:
      - postgresdb
    networks:
      - postgres-network

volumes:
  eventstore-volume-data:
    driver: local
  eventstore-volume-logs:
    driver: local
  mongo_data:
    
networks:
  monitoring-network:
    driver: bridge
  loki:
  postgres-network:
    driver: bridge
  rabbitnetwork:
    driver: bridge
  eventnetwork:
    driver: bridge