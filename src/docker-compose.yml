version: '3.4'

services:

  mongodb:
    image: mongo
    container_name: mongodb
    hostname: mongodb
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    image: mongo-express
    container_name: mongo-express 
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@host.docker.internal/
    depends_on:
      - mongodb

  sqlserverdb:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver
    environment:
      - SA_PASSWORD=Teste@S3nha
      - ACCEPT_EULA=Y
    ports:
      - "1433:1433"

  argon.zine.app.api:
    image: ${DOCKER_REGISTRY-}argonzineappapi
    container_name: webapi
    hostname: webapi
    build:
      context: .
      dockerfile: Apps/Argon.Zine.App.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+;http://+
      - ASPNETCORE_HTTPS_PORT=5001
      - $env:APPDATA\microsoft\UserSecrets\:/root/.microsoft/usersecrets
      - $env:USERPROFILE\.aspnet\https:/root/.aspnet/https/
      - ConnectionStrings__IdentityConnection=Server=host.docker.internal;Database=Identity;User Id=sa;Password=Teste@S3nha;
      - ConnectionStrings__CustomerConnection=Server=host.docker.internal;Database=Customer;User Id=admin;Password=Teste@S3nha;
      - ConnectionStrings__RestaurantConnection=Server=host.docker.internal;Database=Restaurant;User Id=admin;Password=Teste@S3nha;
      - ConnectionStrings__CatalogConnection=Server=host.docker.internal;Database=Catalog;User Id=sa;Password=Teste@S3nha;
      - ConnectionStrings__OrderingConnection=Server=host.docker.internal;Database=Ordering;User Id=admin;Password=Teste@S3nha;
      - ConnectionStrings__EventSourcingConnection=ConnectTo=tcp://admin:changeit@eventstore:1113
      - ConnectionStrings__CatalogRedis=host.docker.internal:6379,password=Teste@S3nha
      - RabbitMQ__HostName=rabbitmq
      - BasketDatabaseSettings__ConnectionString=mongodb://root:example@host.docker.internal/
      - ChatDatabaseSettings__ConnectionString=mongodb://root:example@host.docker.internal/
      - Serilog__WriteTo__1__Args__url=http://loki:3100
      - HealthChecksUI__HealthChecks__0__Uri=https://webapi/health
      - OpenTelemetrySettings__HostName=jaeger
    ports:
      - 5000:80 
      - 5001:443
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    depends_on:
      - sqlserverdb
    networks:
      - rabbitnetwork
      - eventnetwork
      - "monitoring-network"
      - jaegernetwork

  eventstore:
    image: eventstore/eventstore:21.2.0-buster-slim
    container_name: eventstore
    hostname: eventstore
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - "1113:1113"
      - "2113:2113"
    volumes:
      - type: volume
        source: eventstore-volume-data
        target: /var/lib/eventstore
      - type: volume
        source: eventstore-volume-logs
        target: /var/log/eventstore
    networks:
      - eventnetwork

  rabbitmq:
    image: rabbitmq:3.9-management
    container_name: rabbitmq
    hostname: rabbitmq
    volumes:
      - ${APPDATA}/rabbitmq/etc/definitions.json:/etc/rabbitmq/definitions.json
      - ${APPDATA}/rabbitmq/etc/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ${APPDATA}/rabbitmq/data:/var/lib/rabbitmq/mnesia/rabbit@my-rabbit
      - ${APPDATA}/rabbitmq/logs:/var/log/rabbitmq/log
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - rabbitnetwork

  redis:
    image: redis
    container_name: redis
    environment:
      - REDIS_PASSWORD=Teste@S3nha
    ports:
      - "6379:6379"

  redismanager:
    image: lukiya/redismanager
    container_name: redismanager
    ports:
      - 16379:16379
  
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    #depends_on:
    #  - argon.zine.app.api
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - "monitoring-network"

  loki:
    image: grafana/loki:2.3.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - loki

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - loki

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    ports:
      - 9093:9093
    networks:
      - "monitoring-network"
  
  postgresdb:
    image: postgis/postgis
    container_name: postgresdb
    restart: always
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=Teste@S3nha
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
    ports:
      - "5432:5432" 
    volumes:
      - ${APPDATA}/postgres:/var/lib/postgresql
    networks:
      - postgres-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=sidneyxvr@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=Teste@S3nha
    ports:
      - "5050:80"
    depends_on:
      - postgresdb
    networks:
      - postgres-network

  jaeger: 
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    hostname: jaeger
    ports:
      - 6831:6831/udp
      - 16686:16686
    networks:
      - jaegernetwork

volumes:
  eventstore-volume-data:
    driver: local
  eventstore-volume-logs:
    driver: local
  mongo_data:
    
networks:
  monitoring-network:
    driver: bridge
  loki:
  postgres-network:
    driver: bridge
  rabbitnetwork:
    driver: bridge
  eventnetwork:
    driver: bridge
  jaegernetwork:
    driver: bridge