@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Extensions.Logging
@using System.Net.Http

@inject NavigationManager NavigationManager
@inject HttpClient Client

<h3>Chat</h3>
@if (_messages.Count > 0)
{
    @foreach (var message in _messages)
    {
        <div>@(message.Content)</div>
        <br />
    }
}

<a>@IsConnected</a>
<button @onclick="async () => await SendAsync()" disabled="@(!IsConnected)">Buscar</button>

@code
{
    private HubConnection hubConnection;
    private List<Message> _messages = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await Client.PostAsJsonAsync("https://localhost:5001/api/auth/login", new { Email = "sidneyxvr@gmail.com", Password = "Teste@123" });
        var result = await response.Content.ReadFromJsonAsync<Login>();

        Console.WriteLine("Access Token: " + result.AccessToken);

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:5001/chathub", options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(result.AccessToken);
                options.Headers.Add("Authorization", $"Bearer {result.AccessToken}");
            })
            .AddMessagePackProtocol()
            //.ConfigureLogging(options => options.AddConsole().SetMinimumLevel(LogLevel.Information))
            .Build();

        hubConnection.On<List<Message>>("receivePagedMessages", (messages) =>
        {
            _messages = messages;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task SendAsync()
    {
        if (!IsConnected)
        {
            return;
        }

        await hubConnection.SendAsync("messages", new { limit = 20, offset = 0 });
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public class Message
    {
        public Guid RoomId { get; set; }
        public string Content { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? SeenAt { get; set; }
    }

    public class Login
    {
        public string AccessToken { get; set; } = null!;
    }
}
